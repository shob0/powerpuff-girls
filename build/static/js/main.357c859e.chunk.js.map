{"version":3,"sources":["Component/Header.js","Component/Episodes.js","Redux/actionCreator.js","Redux/action.js","Component/View/Title.js","Component/View/Details.js","Component/Shows.js","Component/Landing.js","Services/services.js","Component/Episode.js","Redux/reducer.js","Redux/store.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","to","Episode","showId","useSelector","state","selectedShow","dispatch","useDispatch","episodes","name","shows","url","useEffect","undefined","axios","get","then","res","type","payload","data","catch","err","error","getEpisodedetails","map","episode","key","id","onClick","showTitle","selectedEpisode","season","number","airdate","Title","props","rating","Object","keys","style","color","Details","imageUrl","image","medium","src","alt","imgAlt","dangerouslySetInnerHTML","__html","summary","Shows","show","Landing","returnObj","forEach","val","processShowData","textAlign","marginTop","fontWeight","INITIAL_STATE","pending","rootReducer","action","store","createStore","reducer","compose","applyMiddleware","thunk","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"wRAiBeA,MAdf,WACE,OACE,6BACE,4BAAQC,UAAU,cAChB,6BACE,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,eAAvB,c,+BC6DKE,MAhEf,WACE,IAAMC,EAASC,aAAY,SAACC,GAAD,OAAWA,EAAMC,gBACtCC,EAAWC,cACXC,EAAWL,aAAY,SAACC,GAAD,OAAWA,EAAMI,YACxCC,EAAON,aAAY,SAACC,GAAD,OAAWA,EAAMM,MAAMR,GAAQO,QAElDE,EAAG,sCAAkCT,EAAlC,aAQT,OANAU,qBAAU,gBACSC,IAAbL,GACFF,EC6DC,SAA2BK,GAChC,OAAO,SAACL,GACNQ,IACGC,IAAIJ,GACJK,MAAK,SAACC,GACLX,EA/CC,CACLY,KChCkC,yBDiClCC,QA6CiCF,EAAIG,UAElCC,OAAM,SAACC,GAAD,OAAShB,EA1Cb,CACLY,KCnCgC,uBDoChCK,MAwC6CD,EAAIF,WDpEtCI,CAAkBb,MAE5B,CAACL,EAAUJ,EAAQS,EAAKH,IAGzB,yBAAKT,UAAU,gBACCc,IAAbL,GAA0B,6CACbK,IAAbL,GACC,6BACE,yBAAKT,UAAU,YACb,wBAAIA,UAAU,iBAAd,YACA,yBAAKA,UAAU,YACb,qCACA,mDACA,sCAEF,4BACGS,EAASiB,KAAI,SAACC,GAAD,OACZ,wBAAIC,IAAKD,EAAQE,IACf,6BACE,kBAAC,IAAD,CACE5B,GAAG,UACHD,UAAU,OACV8B,QAAS,WACPH,EAAQI,UAAYrB,EACpBH,ECcjB,SAAyBoB,GAC9B,MAAO,CACLR,KCnD4B,mBDoD5BC,QAASO,GDjBoBK,CAAgBL,MAG3B,yBAAK3B,UAAU,YACb,2BAAI2B,EAAQjB,MACZ,kCAEGiB,EAAQM,OAAS,GACd,IAAMN,EAAQM,OACdN,EAAQM,OAJd,KAMGN,EAAQO,OAAS,GACd,IAAMP,EAAQO,OACdP,EAAQO,QAEd,8BAAOP,EAAQQ,qB,MGtBxBC,MA9Bf,SAAeC,GACb,IAAMC,EAASD,EAAMC,OACjBV,EAAiB,SAAXU,EAAoB,OAASC,OAAOC,KAAKF,GAAQ,GAE3D,OACE,oCACE,yBAAKtC,UAAU,SACb,4BACGqC,EAAM3B,KACN2B,EAAMN,WACL,oCACE,oCACA,kBAAC,IAAD,CAAM9B,GAAG,IAAIwC,MAAO,CAAEC,MAAO,cAC1BL,EAAMN,aAKH,SAAXO,GACC,yCAEE,8BACGV,EADH,IACSU,EAAOV,GADhB,SCJGe,MAlBf,SAAiBN,GACf,IAAMO,EAAWP,EAAMQ,MAAQR,EAAMQ,MAAMC,OAAS,SACpD,OACE,yBAAK9C,UAAU,OACb,6BACE,yBAAK+C,IAAKH,EAAU5C,UAAU,mBAAmBgD,IAAKX,EAAMY,UAE9D,yBAAKjD,UAAU,gBACb,yBACEkD,wBAAyB,CACvBC,OAAQd,EAAMe,cCeXC,MArBf,SAAehB,GACb,IAAMiB,EAAOjB,EAAMiB,KACbhB,EAASgB,EAAKhB,OACpB,OACE,oCACE,yBAAKtC,UAAU,iBACb,kBAAC,EAAD,CAAOU,KAAM4C,EAAK5C,KAAM4B,OAAQA,IAEhC,yBAAKtC,UAAU,eACb,kBAAC,EAAD,CACE6C,MAAOS,EAAKT,MACZO,QAASE,EAAKF,QACdH,OAAQK,EAAK1C,QAInB,kBAAC,EAAD,QCMS2C,MAvBf,SAAiBlB,GACf,IAAMiB,EAAOlD,aAAY,SAACC,GACxB,OAAOA,EAAMM,MAAMN,EAAMC,iBAErBC,EAAWC,cAWjB,OATAK,qBAAU,WLkDL,IAAwBD,OKjDdE,IAATwC,GACF/C,GLgDyBK,EK9CrB,2DL+CD,SAACL,GACNQ,IACGC,IAAIJ,GACJK,MAAK,SAACC,GACL,IAAIG,EMlEmB,SAACA,GAC9B,IAAImC,EAAY,GAIhB,OAHAnC,EAAKoC,SAAQ,SAACC,GACZF,EAAUE,EAAIJ,KAAKzB,IAAM6B,EAAIJ,QAExBE,EN6DUG,CAAgBzC,EAAIG,MAC/Bd,EA/CC,CACLY,KCpB+B,sBDqB/BC,QA6C+BC,IAG3Bd,EAtBC,CACLY,KC7CyB,gBD8CzBC,QAoB0B,UAEvBE,OAAM,SAACC,GAAD,OAAShB,EA7Cb,CACLY,KCtB6B,oBDuB7BK,MA2C2CD,EAAIF,eKrD9C,CAACd,EAAU+C,IAEZ,yBAAKtD,UAAU,aACHc,IAATwC,GAAsB,6CACbxC,IAATwC,GAAsB,kBAAC,EAAD,CAAOA,KAAMA,MEsB3BpD,MAvCf,WACE,IAAMyB,EAAUvB,aAAY,SAACC,GAAD,OAAWA,EAAMsB,WAE7C,OACE,yBAAK3B,UAAU,QACb,yBAAKA,UAAU,uBACAc,IAAZa,GAAyB,kBAAC,IAAD,CAAU1B,GAAG,WAC1Ba,IAAZa,GACC,oCACE,kBAAC,EAAD,CACEjB,KAAMiB,EAAQjB,KACd4B,OAAO,OACPP,UAAWJ,EAAQI,YAErB,kBAAC,EAAD,CACEc,MAAOlB,EAAQkB,MACfO,QAASzB,EAAQyB,QACjBH,OAAQtB,EAAQf,MAElB,yBAAK6B,MAAO,CAAEmB,UAAW,OAAQC,UAAW,SAC1C,2BACE,0BAAMpB,MAAO,CAAEqB,WAAY,SAA3B,oBAA6D,IAD/D,SAES,IACNnC,EAAQM,OAAS,GAAK,IAAMN,EAAQM,OAASN,EAAQM,OAAQ,IAHhE,UAIU,IACPN,EAAQO,OAAS,GAAK,IAAMP,EAAQO,OAASP,EAAQO,QAExD,2BACE,0BAAMO,MAAO,CAAEqB,WAAY,SAA3B,aAAsD,IACrDnC,EAAQQ,c,uBCxBnB4B,EAAgB,CACpBC,SAAS,EACTrD,MAAO,GACPL,aAAc,EACdkB,MAAO,MAwDMyC,EArDK,WAAoC,IAAnC5D,EAAkC,uDAA1B0D,EAAeG,EAAW,uCACrD,OAAQA,EAAO/C,MACb,IPpB+B,sBOqB7B,OAAO,2BACFd,GADL,IAEE2D,SAAS,IAEb,IPxB+B,sBOyB7B,OAAO,2BACF3D,GADL,IAEE2D,SAAS,EACTrD,MAAOuD,EAAO9C,UAElB,IP3ByB,gBO4BvB,OAAO,2BACFf,GADL,IAEEC,aAAc4D,EAAO9C,UAGzB,IP/B6B,oBOgC3B,OAAO,2BACFf,GADL,IAEE2D,SAAS,EACTxC,MAAO0C,EAAO1C,QAElB,IPzCkC,yBO0ChC,OAAO,eACFnB,GAGP,IP7CkC,yBO8ChC,OAAO,2BACFA,GADL,IAEEI,SAAUyD,EAAO9C,UAGrB,IP/CgC,uBOgD9B,OAAO,2BACFf,GADL,IAEEmB,MAAO0C,EAAO1C,QAGlB,IPvD4B,mBOwD1B,OAAO,2BACFnB,GADL,IAEEsB,QAASuC,EAAO9C,UAGpB,QACE,OAAOf,IC1DE8D,EAFDC,YAAYC,EAASC,YAAQC,YAAgBC,O,MCkB5CC,MAhBf,WACE,OACE,kBAAC,IAAD,CAAUN,MAAOA,GACf,yBAAKnE,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO0E,KAAK,WAAWC,UAAWzE,IAClC,kBAAC,IAAD,CAAOwE,KAAK,IAAIC,UAAWpB,SCLnBqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvE,MAAK,SAAAwE,GACJA,EAAaC,gBAEdpE,OAAM,SAAAE,GACLmE,QAAQnE,MAAMA,EAAMoE,c","file":"static/js/main.357c859e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <div>\r\n      <header className=\"App-header\">\r\n        <div>\r\n          <Link to=\"/\" className=\"Header-link\">\r\n            TV App\r\n          </Link>\r\n        </div>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { getEpisodedetails, selectedEpisode } from \"../Redux/actionCreator\";\r\n\r\nfunction Episode() {\r\n  const showId = useSelector((state) => state.selectedShow);\r\n  const dispatch = useDispatch();\r\n  const episodes = useSelector((state) => state.episodes);\r\n  const name = useSelector((state) => state.shows[showId].name);\r\n\r\n  const url = `http://api.tvmaze.com/shows/${showId}/episodes`;\r\n\r\n  useEffect(() => {\r\n    if (episodes === undefined) {\r\n      dispatch(getEpisodedetails(url));\r\n    }\r\n  }, [dispatch, showId, url, episodes]);\r\n\r\n  return (\r\n    <div className=\"Episode\">\r\n      {episodes === undefined && <div>Loading</div>}\r\n      {episodes !== undefined && (\r\n        <div>\r\n          <div className=\"link-box\">\r\n            <h2 className=\"Episode-title\">Episodes</h2>\r\n            <div className=\"flex-box\">\r\n              <div>Name</div>\r\n              <div>Series and Episode</div>\r\n              <div>Year</div>\r\n            </div>\r\n            <ul>\r\n              {episodes.map((episode) => (\r\n                <li key={episode.id}>\r\n                  <div>\r\n                    <Link\r\n                      to=\"episode\"\r\n                      className=\"Link\"\r\n                      onClick={() => {\r\n                        episode.showTitle = name;\r\n                        dispatch(selectedEpisode(episode));\r\n                      }}\r\n                    >\r\n                      <div className=\"flex-box\">\r\n                        <p>{episode.name}</p>\r\n                        <span>\r\n                          S\r\n                          {episode.season < 10\r\n                            ? \"0\" + episode.season\r\n                            : episode.season}\r\n                          -E\r\n                          {episode.number < 10\r\n                            ? \"0\" + episode.number\r\n                            : episode.number}\r\n                        </span>\r\n                        <span>{episode.airdate}</span>\r\n                      </div>\r\n                    </Link>\r\n                  </div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Episode;\r\n","import {\r\n  FETCH_SHOWS_ERROR,\r\n  FETCH_SHOWS_PENDING,\r\n  FETCH_SHOWS_SUCCESS,\r\n  SHOW_SELECTED,\r\n  FETCH_EPISODES_PENDING,\r\n  EPISODE_SELECTED,\r\n  FETCH_EPISODES_ERROR,\r\n  FETCH_EPISODES_SUCCESS,\r\n} from \"./action\";\r\nimport axios from \"axios\";\r\nimport { processShowData } from \"../Services/services\";\r\n\r\nexport function fetchShowsPending() {\r\n  return {\r\n    type: FETCH_SHOWS_PENDING,\r\n  };\r\n}\r\n\r\nexport function fetchShowsSuccess(shows) {\r\n  return {\r\n    type: FETCH_SHOWS_SUCCESS,\r\n    payload: shows,\r\n  };\r\n}\r\n\r\nexport function fetchShowsError(error) {\r\n  return {\r\n    type: FETCH_SHOWS_ERROR,\r\n    error: error,\r\n  };\r\n}\r\n\r\nexport function fetchEpisodeSuccess(episodes) {\r\n  return {\r\n    type: FETCH_EPISODES_SUCCESS,\r\n    payload: episodes,\r\n  };\r\n}\r\n\r\nexport function fetchEpisodeError(error) {\r\n  return {\r\n    type: FETCH_EPISODES_ERROR,\r\n    error: error,\r\n  };\r\n}\r\n\r\nexport function selectedShow(show) {\r\n  return {\r\n    type: SHOW_SELECTED,\r\n    payload: show,\r\n  };\r\n}\r\n\r\nexport function selectedEpisode(episode) {\r\n  return {\r\n    type: EPISODE_SELECTED,\r\n    payload: episode,\r\n  };\r\n}\r\n\r\nexport function getShowdetails(url) {\r\n  return (dispatch: Function) => {\r\n    axios\r\n      .get(url)\r\n      .then((res) => {\r\n        var data = processShowData(res.data);\r\n        dispatch(fetchShowsSuccess(data));\r\n        // var firstKey = Object.keys(data)[0];\r\n        //Defaulting it to 6771 for use powerpuff girls\r\n        dispatch(selectedShow(6771));\r\n      })\r\n      .catch((err) => dispatch(fetchShowsError(err.data)));\r\n  };\r\n}\r\n\r\nexport function getEpisodedetails(url) {\r\n  return (dispatch: Function) => {\r\n    axios\r\n      .get(url)\r\n      .then((res) => {\r\n        dispatch(fetchEpisodeSuccess(res.data));\r\n      })\r\n      .catch((err) => dispatch(fetchEpisodeError(err.data)));\r\n  };\r\n}\r\n","export const FETCH_SHOWS_PENDING = \"FETCH_SHOWS_PENDING\";\r\nexport const FETCH_SHOWS_SUCCESS = \"FETCH_SHOWS_SUCCESS\";\r\nexport const FETCH_EPISODES_PENDING = \"FETCH_EPISODES_PENDING\";\r\nexport const FETCH_EPISODES_SUCCESS = \"FETCH_EPISODES_SUCCESS\";\r\nexport const SHOW_SELECTED = \"SHOW_SELECTED\";\r\nexport const EPISODE_SELECTED = \"EPISODE_SELECTED\";\r\nexport const FETCH_SHOWS_ERROR = \"FETCH_SHOWS_ERROR\";\r\nexport const FETCH_EPISODES_ERROR = \"FETCH_EPISODES_ERROR\";\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Title(props) {\r\n  const rating = props.rating;\r\n  var key = rating === \"none\" ? \"none\" : Object.keys(rating)[0];\r\n\r\n  return (\r\n    <>\r\n      <div className=\"title\">\r\n        <h1>\r\n          {props.name}\r\n          {props.showTitle && (\r\n            <>\r\n              <span>: </span>\r\n              <Link to=\"/\" style={{ color: \"slateblue\" }}>\r\n                {props.showTitle}\r\n              </Link>\r\n            </>\r\n          )}\r\n        </h1>\r\n        {rating !== \"none\" && (\r\n          <p>\r\n            Rating:&nbsp;\r\n            <span>\r\n              {key}({rating[key]})\r\n            </span>\r\n          </p>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\nexport default Title;\r\n","import React from \"react\";\r\n\r\nfunction Details(props) {\r\n  const imageUrl = props.image ? props.image.medium : \"./temp\";\r\n  return (\r\n    <div className=\"box\">\r\n      <div>\r\n        <img src={imageUrl} className=\"show-title-image\" alt={props.imgAlt} />\r\n      </div>\r\n      <div className=\"show-details\">\r\n        <div\r\n          dangerouslySetInnerHTML={{\r\n            __html: props.summary,\r\n          }}\r\n        ></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Details;\r\n","import React from \"react\";\r\nimport Episode from \"./Episodes\";\r\nimport \"./Shows.css\";\r\nimport Title from \"./View/Title\";\r\nimport Details from \"./View/Details\";\r\n\r\nfunction Shows(props) {\r\n  const show = props.show;\r\n  const rating = show.rating;\r\n  return (\r\n    <>\r\n      <div className=\"show-main-div\">\r\n        <Title name={show.name} rating={rating} />\r\n\r\n        <div className=\"details-box\">\r\n          <Details\r\n            image={show.image}\r\n            summary={show.summary}\r\n            imgAlt={show.url}\r\n          />\r\n        </div>\r\n      </div>\r\n      <Episode />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Shows;\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Shows from \"./Shows\";\r\nimport { getShowdetails } from \"../Redux/actionCreator\";\r\n\r\nfunction Landing(props) {\r\n  const show = useSelector((state) => {\r\n    return state.shows[state.selectedShow];\r\n  });\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (show === undefined) {\r\n      dispatch(\r\n        getShowdetails(\r\n          \"http://api.tvmaze.com/search/shows?q=the-powerpuff-girls\"\r\n        )\r\n      );\r\n    }\r\n  }, [dispatch, show]);\r\n  return (\r\n    <div className=\"main\">\r\n      {show === undefined && <div>Loading</div>}\r\n      {show !== undefined && <Shows show={show} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Landing;\r\n","export const processShowData = (data) => {\r\n  var returnObj = {};\r\n  data.forEach((val) => {\r\n    returnObj[val.show.id] = val.show;\r\n  });\r\n  return returnObj;\r\n};\r\n","import React from \"react\";\r\nimport Title from \"./View/Title\";\r\nimport Details from \"./View/Details\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nfunction Episode() {\r\n  const episode = useSelector((state) => state.episode);\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <div className=\"show-main-div \">\r\n        {episode === undefined && <Redirect to=\"/\" />}\r\n        {episode !== undefined && (\r\n          <>\r\n            <Title\r\n              name={episode.name}\r\n              rating=\"none\"\r\n              showTitle={episode.showTitle}\r\n            />\r\n            <Details\r\n              image={episode.image}\r\n              summary={episode.summary}\r\n              imgAlt={episode.url}\r\n            />\r\n            <div style={{ textAlign: \"left\", marginTop: \"2rem\" }}>\r\n              <p>\r\n                <span style={{ fontWeight: \"bold\" }}>Episode Details:</span>{\" \"}\r\n                Season{\" \"}\r\n                {episode.season < 10 ? \"0\" + episode.season : episode.season}{\" \"}\r\n                Episode{\" \"}\r\n                {episode.number < 10 ? \"0\" + episode.number : episode.number}\r\n              </p>\r\n              <p>\r\n                <span style={{ fontWeight: \"bold\" }}>Aired on:</span>{\" \"}\r\n                {episode.airdate}\r\n              </p>\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Episode;\r\n","import {\r\n  FETCH_SHOWS_ERROR,\r\n  FETCH_SHOWS_PENDING,\r\n  FETCH_SHOWS_SUCCESS,\r\n  FETCH_EPISODES_PENDING,\r\n  FETCH_EPISODES_ERROR,\r\n  FETCH_EPISODES_SUCCESS,\r\n  EPISODE_SELECTED,\r\n  SHOW_SELECTED,\r\n} from \"./action\";\r\n\r\nconst INITIAL_STATE = {\r\n  pending: false,\r\n  shows: [],\r\n  selectedShow: 0,\r\n  error: null,\r\n};\r\n\r\nconst rootReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case FETCH_SHOWS_PENDING:\r\n      return {\r\n        ...state,\r\n        pending: true,\r\n      };\r\n    case FETCH_SHOWS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        pending: false,\r\n        shows: action.payload,\r\n      };\r\n    case SHOW_SELECTED: {\r\n      return {\r\n        ...state,\r\n        selectedShow: action.payload,\r\n      };\r\n    }\r\n    case FETCH_SHOWS_ERROR:\r\n      return {\r\n        ...state,\r\n        pending: false,\r\n        error: action.error,\r\n      };\r\n    case FETCH_EPISODES_PENDING: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    case FETCH_EPISODES_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        episodes: action.payload,\r\n      };\r\n    }\r\n    case FETCH_EPISODES_ERROR: {\r\n      return {\r\n        ...state,\r\n        error: action.error,\r\n      };\r\n    }\r\n    case EPISODE_SELECTED: {\r\n      return {\r\n        ...state,\r\n        episode: action.payload,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default rootReducer;\r\n","import { createStore, compose, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport reducer from \"./reducer\";\r\n// import { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\n// disable due to other browser issues\r\n// , composeWithDevTools()\r\nconst store = createStore(reducer, compose(applyMiddleware(thunk)));\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport Header from \"./Component/Header\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Landing from \"./Component/Landing\";\nimport Episode from \"./Component/Episode\";\nimport store from \"./Redux/store\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Router>\n          <Header />\n          <Switch>\n            <Route path=\"/episode\" component={Episode} />\n            <Route path=\"/\" component={Landing} />\n          </Switch>\n        </Router>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}